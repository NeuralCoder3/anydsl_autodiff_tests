// fn @range(body: fn (i32) -> i32) {
//     fn loop(beg: i32, end: i32) -> () {
//         if beg < end {
//             @body(beg);
//             loop(beg + 1, end)
//         }
//     }
//     loop
// }

fn @range(mut a: int, b: int, body: fn(int) -> ()) -> () {
    while a < b {
        body(a);
        a += 1;
    }
}

fn @dot(a: &[i32], b: &[i32], n: i32) -> i32 {
    let mut sum = 0;

    for i in range(0, n) {
        sum += a(i) * b(i);
    }

    sum
}

fn main() -> i32 {
    let a = [42,43,44];
    let b = [12,13,14];

    // The @ marks partial evaluation.
    let c = dot(a, b, 3);
    42+c

    // In this case, it will generate an equivalent of the following code:
    // let mut c = 0;
    // c += a(0) * b(0);
    // c += a(1) * b(1);
    // c += a(2) * b(2);
    // c += a(3) * b(3);
}