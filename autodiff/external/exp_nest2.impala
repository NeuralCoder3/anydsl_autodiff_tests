extern "C" {
    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn logf(f32) -> (f32);
}

fn f(x:f64) -> f64 {
    exp(3.0*exp(2.0*x))
    // exp(3exp(2x)), 2*3exp(2x)*exp(3exp(2x))
}

fn main() -> i32 {
    let Df = rev_diff(f);
    let yp = Df(2.0);
    let y  = yp(0);
    let yP = yp(1);
    let r = y as i32;
    let q = yP(1.0) as i32;
    1000 * r + q
}


/*


        main_2704: Cn [:mem, Cn [:mem, i32]]: (%mem_2719, %return_2762) = {
            %_2854: ⊥∷★ = exp_2717 (%mem_2719, 4∷r64, exp_diff_cont_2723);
            λ@(0∷i1) %_2854
        }
            
            return_2761: Cn [:mem, i32]: (%_2855, %_2856) = {
                %return_2764: ⊥∷★ = %return_2762 @return_2761;
                λ@(0∷i1) %return_2764
            }
            
            exp_diff_cont_2723: Cn [:mem, r64]: (%_2725, e(2x)) = {
                %_2751: r64 = :ROp_mul (0∷nat, 64∷nat) (3∷r64, e(2x));
                %_2852: ⊥∷★ = exp_2717 (%_2725, %_2751, exp_diff_cont_2752);
                λ@(1∷i1) %_2852
            }
                
                exp_diff_cont_2752: Cn [:mem, r64]: (%_2766, e(3e(2x))) = {
                    %_2812: i32 = :Conv_r2s (4294967296∷nat, 64∷nat) e(3e(2x));
                    
%_2816: i32 = :Wrap_mul (1∷nat, 4294967296∷nat) (1000∷i32, %_2812);
%_2835: r64 = :ROp_mul (0∷nat, 64∷nat) (1∷r64, e(3e(2x)));
%_2837: r64 = :ROp_mul (0∷nat, 64∷nat) (3∷r64, %_2835);
  // 3 e(3e(2x))
%_2839: r64 = :ROp_mul (0∷nat, 64∷nat) (e(2x), %_2837);
  // e(2x) 3 e(3e(2x))
%_2841: r64 = :ROp_mul (0∷nat, 64∷nat) (2∷r64, %_2839);
  // 2 e(2x) 3 e(3e(2x))
%_2843: r64 = :ROp_add (0∷nat, 64∷nat) (0∷r64, %_2841);
  // 2 e(2x) 3 e(3e(2x))
%_2845: r64 = :ROp_add (0∷nat, 64∷nat) (0∷r64, %_2843);
  // 2 e(2x) 3 e(3e(2x))
%_2846: i32 = :Conv_r2s (4294967296∷nat, 64∷nat) %_2845;
%_2848: i32 = :Wrap_add (1∷nat, 4294967296∷nat) (%_2816, %_2846);
%_2850: ⊥∷★ = return_2761 (%_2766, %_2848);
λ@(1∷i1) %_2850
                }

*/