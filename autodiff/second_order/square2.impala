 fn sq(a: f32) -> f32 {
    a * a
}

fn sq_pb(a: f32) -> f32 {
    a * a
}

fn sq_deriv(a: f32) -> f32 {
    a * a
}

fn f(a: f32) -> f32 {
    let Df = rev_diff(sq);
    let yp = Df(a); // <a²; \t -> z * (2a)>
    let y  = yp(0); // a²
    let yP = yp(1)(1f); // 2a
    a * a * a + yP
}

fn main() -> i32 {
    let Df = rev_diff(f);
    let yp = Df(4f); // <x² (3); \a -> a* (2x (3))>
    let y  = yp(0);
    let yP = yp(1);
    let r = y as i32;
    let q = yP(1f) as i32; // 2*x
    // let r = (f(3f)) as i32;
    // let q = 0;
    1000 * r + q
    // r = 3³+2*3 = 27+6 = 33
}
