extern fn f(x: &[f32]) -> f32 {
    let x1 = (*x)(0);
    let x2 = x(1);
    let x3 = x(2);
    let z1 = x1 + 2f* x3;
    z1*z1
}
fn main() -> i32 {
    //let x = [3f,2f,4f];
    //let x = [3:f32];
    let x = ~[3:f32];
    //let a = f(x);

    (*x)(0)=1f;
    x(1)=2f;
    x(2)=3f;

    // let y = f(x);
    // let r = y as i32;
    // r

    let Df = rev_diff(f);
    // let x = [3f,2f,4f];
    let yp = Df(x);
    let y  = yp(0);
    // let yP = yp(1)(1f); // direct access necessary
    // //42
    let r = y as i32;
    // let q0 = yP(0) as i32;
    // let q1 = yP(1) as i32;
    // let q2 = yP(2) as i32;
    // 10000 * q0 + 100*q1 + q2
    // // 2(x+2z), 0, 2(x+2z)*2
    // // 220044

    42
}