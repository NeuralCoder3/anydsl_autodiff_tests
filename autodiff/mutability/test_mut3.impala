// f_724: Cn [:mem, r32, Cn [:mem, r32]]: (%mem_739, %x_744, %return_751) = {
//     %_811: i1 = :RCmp_le (0∷nat, 32∷nat) (%x_744, 3∷r32);
//     %p_770: [:mem, :ptr (r32, 0∷nat)] = :slot (r32, 0∷nat) (%mem_739, 758∷nat);
//     %_817: ⊥∷★ = (if_else_789, if_then_784)#%_811 %p_770#0∷i1;
//     λ@(0∷i1) %_817
// }

extern fn f(x: f32) -> f32 {
    let mut p;
    if(x<=3f) {
        p=x*x*x;
    }else{
        p=x*x;
    }
    p
}


fn main() -> i32 {
    let Df = rev_diff(f);
    let yp = Df(4f); // 2
    let y  = yp(0);
    let yP = yp(1);
    let r = y as i32;
    let q = yP(1f) as i32;
    1000 * r + q
    // 4 => 16,8
    // 3 => 27,27
    // 2 => 8,12
}
