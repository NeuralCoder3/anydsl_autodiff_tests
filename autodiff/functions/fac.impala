fn f(a: f32) -> f32 {
    if a <= 0f {
        1f
        // df : 0f
    }
    else {
        a*f(a-1f)
        // df : f(a-1) + a df(a-1)
    }
}
fn main() -> i32 {
    let Df = rev_diff(f);
    let yp = Df(3f);
    let y  = yp(0);
    let yP = yp(1);
    let r = y as i32;
    let q = yP(1f) as i32;
    1000 * r + q
    // a*((a-1)*(a-2)*1)         = 6
    // 
    // df(a) = f(a-1) + df(a-1) * a
    //   df(a-1) = f(a-2) + df(a-2) * (a-1)
    //     df(a-2) = f(a-3) + df(a-3) * (a-2)
    //             =      1 +       0 *     1
    //             = 1
    //           =      1 +       1 *     2
    //           = 3
    //       =      2 +       3 * 3
    //       = 11 
    //
    // 6,11
    // 3!=a(a-1)(a-2)1=a³-3a²+2a
    // d/da = 3a²-6a+2
    //
    // sum_{i=0}^{a-1} a!/(a-i)! * f(a-1-i)
    // = a!*H_a = a!*(γ+ψ(a+1))
    // 
    // from wolfram alpha (for the continuous faculty formula):
    //   a! = Γ(a+1)
    //   with d/da a! = Γ(a+1)ψ⁽⁰⁾(a+1)
    //
    //   11-6γ (euler mascheroni constant) ≈ 
    //   11-6*0.577 ≈ 7.537

    // 4 => 24,50
}
