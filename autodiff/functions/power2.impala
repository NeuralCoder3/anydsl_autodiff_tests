fn @(true) exp_approx(x:f32) -> f32 {
  let y0 = 0f;
  let y1 = y0+1f;
  let y2 = y1+(x)/1f;
  let y3 = y2+(x*x)/2f;
  let y4 = y3+(x*x*x)/6f;
  let y5 = y4+(x*x*x*x)/24f;
  let y6 = y5+(x*x*x*x*x)/120f;
  let y7 = y6+(x*x*x*x*x*x)/720f;
  let y8 = y7+(x*x*x*x*x*x*x)/5040f;
  let y9 = y8+(x*x*x*x*x*x*x*x)/40320f;
  let y10 = y9+(x*x*x*x*x*x*x*x*x)/362880f;
  y10
}

fn @(true) ln_approx(x:f32) -> f32 {
  let y0=0f;
  let exp_y1 = exp_approx(y0);
  let y1=y0+2f*(x-exp_y1)/(x+exp_y1);
  let exp_y2 = exp_approx(y1);
  let y2=y1+2f*(x-exp_y2)/(x+exp_y2);
  y2
}

fn @(true) pow_approx(x:[f32*2]) -> f32 {
  let a=x(0);
  let b=x(1);
  exp_approx(b*ln_approx(a))
}

// true for computation
// false to see individual numbers
fn @(false) round(x:f32) -> i32 {
    (x+0.5f) as i32
}

extern "C" {
    fn g() -> f32;
}

fn main2() -> i32 {
    round(pow_approx([2f,6f]))
}

fn main() -> i32 {
    let Df = rev_diff(pow_approx);
    let x = [2f,5f];
    let yp = Df(x);
    let y  = yp(0);
    let yP = yp(1)(1f);
    let r = round(y);
    let q0 = round(yP(0));
    let q1 = round(yP(1));
    10000 * r + 100*q0 + q1
    //a^b=exp(b*ln(a))
    //b*a^(b-1)
    //a^b*ln(a)

    // 32, 80, â‰ˆ22
}
