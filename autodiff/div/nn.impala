extern "C" {
    fn printString(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn logf(f32) -> (f32);
    fn lgamma(f64) -> (f64);
    fn malloc(i64) -> (&mut[f64]);
    fn read_gmm_size(
        file: &[u8],
        d: &mut i32,
        k: &mut i32,
        n: &mut i32
    ) -> ();
    fn read_gmm(
        file: &[u8],
        d: &mut i32,
        k: &mut i32,
        n: &mut i32,
        wishartM: &mut i32,
        wishartGamma: &mut f64,
        alphas: &mut[f64],
        means: &mut[f64],
        icf: &mut[f64],
        x: &mut[f64],
    ) -> ();
}

fn range(mut b: i32, e: i32, body: fn(i32) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn preprocess_qs( d: i32, k: i32,
    icf : &[f64],
    sum_qs : &mut[f64],
    Qdiags : &mut[f64]) -> ()
{
    let icf_sz = d * (d + 1) / 2;

    for ik in range(0, k) {
        sum_qs(ik) = 0.0;

        for id in range(0, d) {
            let q = icf(ik * icf_sz + id);
            sum_qs(ik) = sum_qs(ik) + q;
            Qdiags(ik * d + id) = exp(q);
        }
    }
}

fn subtract( d: i32,
    x: &[f64],
    y: &[f64],
    out: &mut[f64]) -> ()
{
    for id in range(0, d) {
        out(id) = x(id) - y(id);
    }
}

fn Qtimesx( d: i32,
    Qdiag: &[f64],
    ltri: &[f64], // strictly lower triangular part
    x: &[f64],
    out: &mut[f64]) -> ()
{
    for id in range(0, d) {
        out(id) = Qdiag(id) * x(id);
    }

    let mut Lparamsidx = 0;

    for i in range(0, d) {
        for j in range(i + 1, d) {
            out(j) = out(j) + ltri(Lparamsidx) * x(i);
            Lparamsidx++;
        }
    }
}

fn sqnorm(d: i32, v : &[f64]) -> (f64){
    let mut sum = 0.0;
    for i in range(0, d) {
        sum += v(i) * v(i);
    }

    sum
}

fn arr_max(n: i32,x : &[f64] ) -> f64
{
    let mut m = x(0);
    for i in range(1, n) {
        if (m < x(i)){
            m = x(i);
        }
    }

    m
}

fn logsumexp( n: i32, x : &[f64] ) -> f64
{
    let mx = arr_max(n, x);
    let mut semx = 0.0;
    for i in range(0, n) {
        semx += exp(x(i) - mx);
    }
    log(semx) + mx
}

fn log_gamma_distrib( a: f64, p: i32) -> f64
{
    let PI : f64 = 3.14159265359;
    let mut out = 0.25 * ((p * (p - 1)) as f64) * log(PI);

    for j in range(1, p+1) {
        out += lgamma(a + 0.5 * ((1 - j) as f64));
    }

    out
}


fn log_wishart_prior( p: i32, k: i32,
    wishartM: i32,
    wishartGamma: f64,
    sum_qs: &[f64],
    Qdiags: &[f64],
    icf: &[f64]) -> f64
{
    let n = p + wishartM + 1;
    let icf_sz = p * (p + 1) / 2;

    let C = (n as f64) * (p as f64) * (log(wishartGamma) - 0.5 * log(2.0)) - log_gamma_distrib(0.5 * (n as f64), p);

    let mut out = 0.0;
    
    for ik in range(0, k) {
        let currentQdiags : &[f64] =  &Qdiags(ik * p) as &[f64];
        let currentIfc : &[f64] =  &icf(ik * icf_sz + p) as &[f64];
    
        let frobenius = sqnorm(p, currentQdiags) + sqnorm(icf_sz - p, currentIfc);
        out += 0.5 * wishartGamma * wishartGamma * frobenius - (wishartM as f64) * sum_qs(ik);
    }

    out - (k as f64) * C
}

fn malloc_double(size: i32) -> &mut[f64]{
    malloc((size * 8) as i64)
}

extern fn gmm(d: i32, k: i32, n: i32,
        wishartGamma: f64,
        wishartM: i32,
        alphas : &[f64],
        means : &[f64],
        icf : &[f64],
        x : &[f64],
        err: &mut f64) -> f64{

    let PI : f64 = 3.14159265359;
    let CONSTANT = -(n as f64) * ( d as f64) * 0.5 * log(2.0 * PI);
    let icf_sz = d * (d + 1) / 2;

    let Qdiags = ~[d*k:f64];
    let sum_qs = ~[k:f64];
    let xcentered = ~[d:f64];
    let Qxcentered = ~[d:f64];
    let main_term = ~[k:f64];

    preprocess_qs(d, k, icf, sum_qs, Qdiags);

    let mut slse = 0.0;

    for ix in range(0, n) {
        let currentX : &[f64] =  &x(ix * d) as &[f64];
        for ik in range(0, k) {
            let currentQdiags =  &Qdiags(ik * d) as &[f64];
            let currentMeans =  &means(ik * d) as &[f64];
            let currentIfc =  &icf(ik * icf_sz + d) as &[f64];

            subtract(d, currentX, currentMeans, xcentered);
            Qtimesx(d, currentQdiags, currentIfc, xcentered, Qxcentered);
            main_term(ik) = alphas(ik) + sum_qs(ik) - 0.5 * sqnorm(d, Qxcentered);
        }
        slse += logsumexp(k, main_term);
    }

    let lse_alphas = logsumexp(k, alphas);

    *err = CONSTANT + slse - (n as f64) * lse_alphas + log_wishart_prior(d, k, wishartM, wishartGamma, sum_qs, Qdiags, icf);
    *err
}

/*
fn runGmmBenchmark(file: &[u8]) -> (){
    let mut d = 2;
    let mut k = 5;
    let mut n = 1000;

    let dp = &mut d;
    let kp = &mut k;
    let np = &mut n;

    read_gmm_size(file, dp, kp, np);


    let mut wishartM: i32 = 0;
    let mut wishartGamma: f64 = 1.0;

    let alphas_size = k;
    let means_size = d*k;
    let icf_size = k * ( d * (d + 1) / 2 );

    let size = alphas_size + means_size + icf_size;

    let alphas: &mut[f64] = ~[k:f64];
    let means: &mut[f64] = ~[d*k:f64];
    let icf: &mut[f64] = ~[k * ( d + d * ( d - 1 ) / 2 ):f64];
    let x: &mut[f64] = ~[n*d:f64];

    let wishartMp = &mut wishartM;
    let wishartGammap = &mut wishartGamma;

    read_gmm(file, dp, kp, np, wishartMp, wishartGammap, alphas, means, icf, x);

    let mut result = 0.0;

    gmm(d, k, n, wishartGamma, wishartM, alphas, means, icf, x, &mut result );


    printDouble(result);
}


fn main(argc: i32,argv :&[&[u8]]) -> i32 {
    if argc < 2{
        printString("No Benchmark specified");
    }else{
        let file = argv(1);
        printString(file);
        runGmmBenchmark(file);
    }

    0
}*/

/*
    let J : &mut[f64] = ~[size:f64];

    let alphas_d  =  J;
    let means_d =  &J(k) as &mut[f64];
    let icf_d =  &J(k + d * k) as &mut[f64];

    gmm_enzyme_diff(
        gmm,
        d, k, n,
        wishartM,
        wishartGamma,
        alphas, alphas_d,
        means, means_d,
        icf, icf_d,
        x )
*/